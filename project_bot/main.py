import re
import requests
import datetime
from telebot import types, apihelper
from project_bot.loader import bot, user_data_base, Users, config
from project_bot.handler import checking_input_message, checking_numbers_of_hotels, \
    checking_entered_photo_count, show_calendar, choosing_search_method, setting_checkin_checkout_date
from project_bot.radapi import SearchHotel
from project_bot.history import show_history

info = '‚óè /help ‚Äî –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞\n' \
       '‚óè /lowprice ‚Äî –≤—ã–≤–æ–¥ —Å–∞–º—ã—Ö –¥–µ—à—ë–≤—ã—Ö –æ—Ç–µ–ª–µ–π –≤ –≥–æ—Ä–æ–¥–µ\n' \
       '‚óè /highprice ‚Äî –≤—ã–≤–æ–¥ —Å–∞–º—ã—Ö –¥–æ—Ä–æ–≥–∏—Ö –æ—Ç–µ–ª–µ–π –≤ –≥–æ—Ä–æ–¥–µ\n' \
       '‚óè /bestdeal ‚Äî –≤—ã–≤–æ–¥ –æ—Ç–µ–ª–µ–π, –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ —Ü–µ–Ω–µ –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—é –æ—Ç —Ü–µ–Ω—Ç—Ä–∞\n' \
       '‚óè /history - –≤—ã–≤–æ–¥ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π'


@bot.message_handler(commands=['start', 'help', 'lowprice', 'highprice', 'bestdeal', 'history'])
def handle_start_help(message):
    """
    –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: /start, /help, /lowprice, /highprice, /bestdeal, /history
    :param message: –æ–±—ä–µ–∫—Ç –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :type: message: types.Message
    """
    if not user_data_base.get(message.from_user.id):
        user_data_base[message.from_user.id] = Users(message)

    #  –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=False)
    btn_a = types.KeyboardButton('üîç –ù–∞–π—Ç–∏ –æ—Ç–µ–ª—å')
    btn_b = types.KeyboardButton('üìñ –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ')
    btn_c = types.KeyboardButton('‚ÑπÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
    markup.row(btn_a, btn_b)
    markup.row(btn_c)

    if message.text == '/start':
        start_help_text = "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é {user},\n" \
                          "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"üîç –ù–∞–π—Ç–∏ –æ—Ç–µ–ª—å\"".format(
            user=user_data_base[message.from_user.id].username
        )
        bot.send_message(message.from_user.id, start_help_text, reply_markup=markup)

    elif message.text == '/help':
        bot.send_message(message.from_user.id, info, reply_markup=markup)

    elif message.text in ['/lowprice', '/highprice']:
        if message.text == '/lowprice':
            user_data_base[message.from_user.id].search_method = 'PRICE'
        else:
            user_data_base[message.from_user.id].search_method = 'PRICE_HIGHEST_FIRST'

        msg = bot.send_message(message.from_user.id, '–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å?')
        bot.register_next_step_handler(msg, checking_input_message)
    elif message.text == '/bestdeal':
        user_data_base[message.from_user.id].search_method = 'best_deal'
        msg = bot.send_message(message.from_user.id, '–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å?')
        bot.register_next_step_handler(msg, checking_input_message)
    elif message.text == '/history':
        show_history(message)


@bot.message_handler(content_types=['text'])
def handler_for_commands_and_buttons(message):
    """
    –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:
    1. 'üîç –ù–∞–π—Ç–∏ –æ—Ç–µ–ª—å' - –≤—ã–¥–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –æ–∫–Ω–µ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π.
    2. 'üìñ –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ' - –∫—Ä–∞—Ç–∫–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    3. '‚ÑπÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è' - –≤–≤–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    :param message: –æ–±—ä–µ–∫—Ç –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :type: message: types.Message
    """
    if not user_data_base.get(message.from_user.id):
        user_data_base[message.from_user.id] = Users(message)

    if message.text == 'üîç –ù–∞–π—Ç–∏ –æ—Ç–µ–ª—å':
        user_data_base[message.from_user.id].clear_cache()
        show_calendar(bot=bot, id=message.from_user.id)

    elif message.text == 'üìñ –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ':
        bot.send_message(message.from_user.id, info)
    elif message.text == '‚ÑπÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
        print(type(message.from_user.id))
        bot.send_message(message.from_user.id,
                         'Telegram-–±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π. –î–∏–ø–ª–æ–º–Ω—ã–π –ø—Ä–æ–µ–∫—Ç Skillbox')


@bot.callback_query_handler(func=lambda button_result: True)
def inline(button_result):
    """
    –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ –∫–ª–∏–∫–µ "–∫–Ω–æ–ø–∫–∏" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ –æ–∫–Ω–µ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞.
    :param button_result: response –æ–±—ä–µ–∫—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏.
    :return:
    """
    if button_result.data.startswith('calendar'):
        try:
            # user_data_base[button_result.from_user.id].checkin_date = datetime.datetime.strptime(
            #     ':'.join([year, month, day]), "%Y:%m:%d").date()
            name, action, year, month, day = button_result.data.split(':')
            if action == 'DAY':
                bot.delete_message(button_result.message.chat.id, button_result.message.message_id)
                setting_checkin_checkout_date(button_result)

            elif action in ['NEXT-MONTH', 'PREVIOUS-MONTH']:
                bot.send_message(button_result.message.chat.id, '–ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å'
                                                                ', –Ω–∞–∂–º–∏—Ç–µ \'üîç –ù–∞–π—Ç–∏ –æ—Ç–µ–ª—å\'')
                # if action == 'NEXT-MONTH':
                #     month = str(int(month) + 1)
                # elif action == 'PREVIOUS-MONTH':
                #     month = str(int(month) - 1)
                # show_calendar(bot, button_result.message, int(month), name=name)
            elif action == 'CANCEL':
                bot.send_message(button_result.message.chat.id, '–í—ã–±—Ä–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã.\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å'
                                                                ', –Ω–∞–∂–º–∏—Ç–µ \'üîç –ù–∞–π—Ç–∏ –æ—Ç–µ–ª—å\'')
        except ValueError:
            bot.send_message(button_result.message.chat.id, '–î–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\n–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞')
    else:
        if button_result.data in ['low_price', 'high_price']:
            user_data_base[button_result.message.chat.id].search_method = (
                'PRICE' if button_result.data == 'low_price' else 'PRICE_HIGHEST_FIRST')
            bot.delete_message(button_result.message.chat.id, button_result.message.message_id)
            message_what_city = bot.send_message(button_result.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞')
            bot.register_next_step_handler(message_what_city, checking_input_message)

        elif button_result.data == 'best_deal':
            user_data_base[button_result.message.chat.id].search_method = 'best_deal'
            bot.delete_message(button_result.message.chat.id, button_result.message.message_id)
            message_what_city = bot.send_message(button_result.message.chat.id, '–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å?')
            bot.register_next_step_handler(message_what_city, checking_input_message)

        elif button_result.data.startswith('choice_city_'):
            choice_city = int(re.sub(r'choice_city_', '', button_result.data))
            user_data_base[button_result.message.chat.id].id_city = \
                user_data_base[button_result.message.chat.id].cache_data['suggestions'][0]['entities'][choice_city][
                    'destinationId']
            bot.delete_message(button_result.message.chat.id, button_result.message.message_id)
            input_number_of_hotels = bot.send_message(button_result.message.chat.id,
                                                      '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –æ—Ç–µ–ª–µ–π'
                                                      )
            bot.register_next_step_handler(input_number_of_hotels, checking_numbers_of_hotels)

        elif button_result.data in ['yes_photo', 'no_photo']:
            user_data_base[button_result.message.chat.id].photo = (True if button_result.data == 'yes_photo' else False)
            bot.delete_message(button_result.message.chat.id, button_result.message.message_id)
            if user_data_base[button_result.message.chat.id].photo:
                msg2 = bot.send_message(button_result.message.chat.id,
                                        '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π - –º–∞–∫—Å–∏–º—É–º 4')
                bot.register_next_step_handler(msg2, checking_entered_photo_count)
            else:
                user_id = button_result.message.chat.id
                SearchHotel.search_hotels(bot, user_id)


if __name__ == '__main__':
    while True:
        try:
            bot.polling(none_stop=True, interval=0)
        except requests.exceptions.ReadTimeout:
            print('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞')
